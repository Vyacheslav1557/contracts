// Package testerv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package testerv1

import (
	"fmt"
	"net/url"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Contest defines model for Contest.
type Contest struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Title     string             `json:"title"`
	UpdatedAt time.Time          `json:"updated_at"`
}

// ContestProblem defines model for ContestProblem.
type ContestProblem struct {
	CreatedAt        time.Time `json:"created_at"`
	InputFormatHtml  string    `json:"input_format_html"`
	LegendHtml       string    `json:"legend_html"`
	MemoryLimit      int32     `json:"memory_limit"`
	NotesHtml        string    `json:"notes_html"`
	OutputFormatHtml string    `json:"output_format_html"`
	Position         int32     `json:"position"`
	ProblemId        int32     `json:"problem_id"`
	ScoringHtml      string    `json:"scoring_html"`
	TimeLimit        int32     `json:"time_limit"`
	Title            string    `json:"title"`
	UpdatedAt        time.Time `json:"updated_at"`
}

// ContestProblemListItem defines model for ContestProblemListItem.
type ContestProblemListItem struct {
	CreatedAt   time.Time `json:"created_at"`
	MemoryLimit int32     `json:"memory_limit"`
	Position    int32     `json:"position"`
	ProblemId   int32     `json:"problem_id"`
	TimeLimit   int32     `json:"time_limit"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// CreateSolutionRequest defines model for CreateSolutionRequest.
type CreateSolutionRequest struct {
	Solution openapi_types.File `json:"solution"`
}

// CreationResponse defines model for CreationResponse.
type CreationResponse struct {
	Id int32 `json:"id"`
}

// GetContestProblemResponse defines model for GetContestProblemResponse.
type GetContestProblemResponse struct {
	Problem ContestProblem `json:"problem"`
}

// GetContestResponse defines model for GetContestResponse.
type GetContestResponse struct {
	Contest  Contest                  `json:"contest"`
	Problems []ContestProblemListItem `json:"problems"`
}

// GetMonitorResponse defines model for GetMonitorResponse.
type GetMonitorResponse struct {
	Participants []ParticipantsStat   `json:"participants"`
	Summary      []ProblemStatSummary `json:"summary"`
}

// GetProblemResponse defines model for GetProblemResponse.
type GetProblemResponse struct {
	Problem Problem `json:"problem"`
}

// GetSolutionResponse defines model for GetSolutionResponse.
type GetSolutionResponse struct {
	Solution Solution `json:"solution"`
}

// GetUserResponse defines model for GetUserResponse.
type GetUserResponse struct {
	User User `json:"user"`
}

// ListContestsResponse defines model for ListContestsResponse.
type ListContestsResponse struct {
	Contests   []Contest  `json:"contests"`
	Pagination Pagination `json:"pagination"`
}

// ListProblemsResponse defines model for ListProblemsResponse.
type ListProblemsResponse struct {
	Pagination Pagination         `json:"pagination"`
	Problems   []ProblemsListItem `json:"problems"`
}

// ListSolutionsResponse defines model for ListSolutionsResponse.
type ListSolutionsResponse struct {
	AccessToken string              `json:"access-token"`
	Pagination  Pagination          `json:"pagination"`
	Solutions   []SolutionsListItem `json:"solutions"`
}

// ListUsersResponse defines model for ListUsersResponse.
type ListUsersResponse struct {
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	Page  int32 `json:"page"`
	Total int32 `json:"total"`
}

// ParticipantsStat defines model for ParticipantsStat.
type ParticipantsStat struct {
	Attempts []ProblemAttempts  `json:"attempts"`
	Penalty  int32              `json:"penalty"`
	Solved   int32              `json:"solved"`
	UserId   openapi_types.UUID `json:"user_id"`
	Username string             `json:"username"`
}

// Problem defines model for Problem.
type Problem struct {
	CreatedAt        time.Time `json:"created_at"`
	Id               int32     `json:"id"`
	InputFormat      string    `json:"input_format"`
	InputFormatHtml  string    `json:"input_format_html"`
	Legend           string    `json:"legend"`
	LegendHtml       string    `json:"legend_html"`
	MemoryLimit      int32     `json:"memory_limit"`
	Notes            string    `json:"notes"`
	NotesHtml        string    `json:"notes_html"`
	OutputFormat     string    `json:"output_format"`
	OutputFormatHtml string    `json:"output_format_html"`
	Scoring          string    `json:"scoring"`
	ScoringHtml      string    `json:"scoring_html"`
	TimeLimit        int32     `json:"time_limit"`
	Title            string    `json:"title"`
	UpdatedAt        time.Time `json:"updated_at"`
}

// ProblemAttempts defines model for ProblemAttempts.
type ProblemAttempts struct {
	FailedAttempts int32  `json:"failed_attempts"`
	Position       int32  `json:"position"`
	ProblemId      int32  `json:"problem_id"`
	State          *int32 `json:"state"`
}

// ProblemStatSummary defines model for ProblemStatSummary.
type ProblemStatSummary struct {
	FAttempts int32 `json:"f_attempts"`
	Position  int32 `json:"position"`
	ProblemId int32 `json:"problem_id"`
	SAttempts int32 `json:"s_attempts"`
	TAttempts int32 `json:"t_attempts"`
}

// ProblemsListItem defines model for ProblemsListItem.
type ProblemsListItem struct {
	CreatedAt   time.Time `json:"created_at"`
	Id          int32     `json:"id"`
	MemoryLimit int32     `json:"memory_limit"`
	TimeLimit   int32     `json:"time_limit"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// Solution defines model for Solution.
type Solution struct {
	ContestId    openapi_types.UUID `json:"contest_id"`
	ContestTitle string             `json:"contest_title"`
	CreatedAt    time.Time          `json:"created_at"`
	Id           int32              `json:"id"`
	Language     int32              `json:"language"`
	MemoryStat   int32              `json:"memory_stat"`
	Penalty      int32              `json:"penalty"`
	Position     int32              `json:"position"`
	ProblemId    int32              `json:"problem_id"`
	ProblemTitle string             `json:"problem_title"`
	Score        int32              `json:"score"`
	Solution     string             `json:"solution"`
	State        int32              `json:"state"`
	TimeStat     int32              `json:"time_stat"`
	UpdatedAt    time.Time          `json:"updated_at"`
	UserId       openapi_types.UUID `json:"user_id"`
	Username     string             `json:"username"`
}

// SolutionsListItem defines model for SolutionsListItem.
type SolutionsListItem struct {
	ContestId    openapi_types.UUID `json:"contest_id"`
	ContestTitle string             `json:"contest_title"`
	CreatedAt    time.Time          `json:"created_at"`
	Id           int32              `json:"id"`
	Language     int32              `json:"language"`
	MemoryStat   int32              `json:"memory_stat"`
	Penalty      int32              `json:"penalty"`
	Position     int32              `json:"position"`
	ProblemId    int32              `json:"problem_id"`
	ProblemTitle string             `json:"problem_title"`
	Score        int32              `json:"score"`
	State        int32              `json:"state"`
	TimeStat     int32              `json:"time_stat"`
	UpdatedAt    time.Time          `json:"updated_at"`
	UserId       openapi_types.UUID `json:"user_id"`
	Username     string             `json:"username"`
}

// UpdateContestRequest defines model for UpdateContestRequest.
type UpdateContestRequest struct {
	Title *string `json:"title,omitempty"`
}

// UpdateProblemRequest defines model for UpdateProblemRequest.
type UpdateProblemRequest struct {
	InputFormat  *string `json:"input_format,omitempty"`
	Legend       *string `json:"legend,omitempty"`
	MemoryLimit  *int32  `json:"memory_limit,omitempty"`
	Notes        *string `json:"notes,omitempty"`
	OutputFormat *string `json:"output_format,omitempty"`
	Scoring      *string `json:"scoring,omitempty"`
	TimeLimit    *int32  `json:"time_limit,omitempty"`
	Title        *string `json:"title,omitempty"`
}

// UploadProblemRequest defines model for UploadProblemRequest.
type UploadProblemRequest struct {
	Archive openapi_types.File `json:"archive"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	Role      string             `json:"role"`
	UpdatedAt time.Time          `json:"updatedAt"`
	Username  string             `json:"username"`
}

// ListContestsParams defines parameters for ListContests.
type ListContestsParams struct {
	Page     int32   `form:"page" json:"page"`
	PageSize int32   `form:"pageSize" json:"pageSize"`
	Title    *string `form:"title,omitempty" json:"title,omitempty"`
}

// CreateContestParams defines parameters for CreateContest.
type CreateContestParams struct {
	Title string `form:"title" json:"title"`
}

// DeleteParticipantParams defines parameters for DeleteParticipant.
type DeleteParticipantParams struct {
	UserId openapi_types.UUID `form:"user_id" json:"user_id"`
}

// ListParticipantsParams defines parameters for ListParticipants.
type ListParticipantsParams struct {
	Page     int32 `form:"page" json:"page"`
	PageSize int32 `form:"pageSize" json:"pageSize"`
}

// CreateParticipantParams defines parameters for CreateParticipant.
type CreateParticipantParams struct {
	UserId openapi_types.UUID `form:"user_id" json:"user_id"`
}

// CreateContestProblemParams defines parameters for CreateContestProblem.
type CreateContestProblemParams struct {
	ProblemId int32 `form:"problem_id" json:"problem_id"`
}

// ListProblemsParams defines parameters for ListProblems.
type ListProblemsParams struct {
	Page     int32   `form:"page" json:"page"`
	PageSize int32   `form:"pageSize" json:"pageSize"`
	Title    *string `form:"title,omitempty" json:"title,omitempty"`
	Order    *int32  `form:"order,omitempty" json:"order,omitempty"`
}

// CreateProblemParams defines parameters for CreateProblem.
type CreateProblemParams struct {
	Title string `form:"title" json:"title"`
}

// ListSolutionsParams defines parameters for ListSolutions.
type ListSolutionsParams struct {
	Page      int32               `form:"page" json:"page"`
	PageSize  int32               `form:"pageSize" json:"pageSize"`
	ContestId *int32              `form:"contestId,omitempty" json:"contestId,omitempty"`
	UserId    *openapi_types.UUID `form:"userId,omitempty" json:"userId,omitempty"`
	ProblemId *int32              `form:"problemId,omitempty" json:"problemId,omitempty"`
	State     *int32              `form:"state,omitempty" json:"state,omitempty"`
	Order     *int32              `form:"order,omitempty" json:"order,omitempty"`
	Language  *int32              `form:"language,omitempty" json:"language,omitempty"`
}

// CreateSolutionParams defines parameters for CreateSolution.
type CreateSolutionParams struct {
	ProblemId int32              `form:"problem_id" json:"problem_id"`
	ContestId openapi_types.UUID `form:"contest_id" json:"contest_id"`
	Language  int32              `form:"language" json:"language"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	Page     int32   `form:"page" json:"page"`
	PageSize int32   `form:"pageSize" json:"pageSize"`
	Search   *string `form:"search,omitempty" json:"search,omitempty"`
	Role     *string `form:"role,omitempty" json:"role,omitempty"`
}

// UpdateContestJSONRequestBody defines body for UpdateContest for application/json ContentType.
type UpdateContestJSONRequestBody = UpdateContestRequest

// UpdateProblemJSONRequestBody defines body for UpdateProblem for application/json ContentType.
type UpdateProblemJSONRequestBody = UpdateProblemRequest

// UploadProblemMultipartRequestBody defines body for UploadProblem for multipart/form-data ContentType.
type UploadProblemMultipartRequestBody = UploadProblemRequest

// CreateSolutionMultipartRequestBody defines body for CreateSolution for multipart/form-data ContentType.
type CreateSolutionMultipartRequestBody = CreateSolutionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /contests)
	ListContests(c *fiber.Ctx, params ListContestsParams) error

	// (POST /contests)
	CreateContest(c *fiber.Ctx, params CreateContestParams) error

	// (DELETE /contests/{contest_id})
	DeleteContest(c *fiber.Ctx, contestId openapi_types.UUID) error

	// (GET /contests/{contest_id})
	GetContest(c *fiber.Ctx, contestId openapi_types.UUID) error

	// (PATCH /contests/{contest_id})
	UpdateContest(c *fiber.Ctx, contestId openapi_types.UUID) error

	// (GET /contests/{contest_id}/monitor)
	GetMonitor(c *fiber.Ctx, contestId openapi_types.UUID) error

	// (DELETE /contests/{contest_id}/participants)
	DeleteParticipant(c *fiber.Ctx, contestId openapi_types.UUID, params DeleteParticipantParams) error

	// (GET /contests/{contest_id}/participants)
	ListParticipants(c *fiber.Ctx, contestId openapi_types.UUID, params ListParticipantsParams) error

	// (POST /contests/{contest_id}/participants)
	CreateParticipant(c *fiber.Ctx, contestId openapi_types.UUID, params CreateParticipantParams) error

	// (POST /contests/{contest_id}/problems)
	CreateContestProblem(c *fiber.Ctx, contestId openapi_types.UUID, params CreateContestProblemParams) error

	// (DELETE /contests/{contest_id}/problems/{problem_id})
	DeleteContestProblem(c *fiber.Ctx, contestId openapi_types.UUID, problemId int32) error

	// (GET /contests/{contest_id}/problems/{problem_id})
	GetContestProblem(c *fiber.Ctx, contestId openapi_types.UUID, problemId int32) error

	// (GET /health)
	GetHealth(c *fiber.Ctx) error

	// (GET /problems)
	ListProblems(c *fiber.Ctx, params ListProblemsParams) error

	// (POST /problems)
	CreateProblem(c *fiber.Ctx, params CreateProblemParams) error

	// (DELETE /problems/{id})
	DeleteProblem(c *fiber.Ctx, id int32) error

	// (GET /problems/{id})
	GetProblem(c *fiber.Ctx, id int32) error

	// (PATCH /problems/{id})
	UpdateProblem(c *fiber.Ctx, id int32) error

	// (POST /problems/{id})
	UploadProblem(c *fiber.Ctx, id int32) error

	// (GET /solutions)
	ListSolutions(c *fiber.Ctx, params ListSolutionsParams) error

	// (POST /solutions)
	CreateSolution(c *fiber.Ctx, params CreateSolutionParams) error

	// (GET /solutions/{solution_id})
	GetSolution(c *fiber.Ctx, solutionId int32) error

	// (GET /users)
	GetUsers(c *fiber.Ctx, params GetUsersParams) error

	// (GET /users/me)
	GetMe(c *fiber.Ctx) error

	// (GET /users/{id})
	GetUser(c *fiber.Ctx, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ListContests operation middleware
func (siw *ServerInterfaceWrapper) ListContests(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListContestsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument page is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := c.Query("pageSize"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument pageSize is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", query, &params.PageSize)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pageSize: %w", err).Error())
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", query, &params.Title)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter title: %w", err).Error())
	}

	return siw.Handler.ListContests(c, params)
}

// CreateContest operation middleware
func (siw *ServerInterfaceWrapper) CreateContest(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateContestParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "title" -------------

	if paramValue := c.Query("title"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument title is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "title", query, &params.Title)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter title: %w", err).Error())
	}

	return siw.Handler.CreateContest(c, params)
}

// DeleteContest operation middleware
func (siw *ServerInterfaceWrapper) DeleteContest(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "contest_id" -------------
	var contestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "contest_id", c.Params("contest_id"), &contestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contest_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteContest(c, contestId)
}

// GetContest operation middleware
func (siw *ServerInterfaceWrapper) GetContest(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "contest_id" -------------
	var contestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "contest_id", c.Params("contest_id"), &contestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contest_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetContest(c, contestId)
}

// UpdateContest operation middleware
func (siw *ServerInterfaceWrapper) UpdateContest(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "contest_id" -------------
	var contestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "contest_id", c.Params("contest_id"), &contestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contest_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateContest(c, contestId)
}

// GetMonitor operation middleware
func (siw *ServerInterfaceWrapper) GetMonitor(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "contest_id" -------------
	var contestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "contest_id", c.Params("contest_id"), &contestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contest_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetMonitor(c, contestId)
}

// DeleteParticipant operation middleware
func (siw *ServerInterfaceWrapper) DeleteParticipant(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "contest_id" -------------
	var contestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "contest_id", c.Params("contest_id"), &contestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contest_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteParticipantParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument user_id is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", query, &params.UserId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	return siw.Handler.DeleteParticipant(c, contestId, params)
}

// ListParticipants operation middleware
func (siw *ServerInterfaceWrapper) ListParticipants(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "contest_id" -------------
	var contestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "contest_id", c.Params("contest_id"), &contestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contest_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParticipantsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument page is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := c.Query("pageSize"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument pageSize is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", query, &params.PageSize)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pageSize: %w", err).Error())
	}

	return siw.Handler.ListParticipants(c, contestId, params)
}

// CreateParticipant operation middleware
func (siw *ServerInterfaceWrapper) CreateParticipant(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "contest_id" -------------
	var contestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "contest_id", c.Params("contest_id"), &contestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contest_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateParticipantParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument user_id is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", query, &params.UserId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	return siw.Handler.CreateParticipant(c, contestId, params)
}

// CreateContestProblem operation middleware
func (siw *ServerInterfaceWrapper) CreateContestProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "contest_id" -------------
	var contestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "contest_id", c.Params("contest_id"), &contestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contest_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateContestProblemParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "problem_id" -------------

	if paramValue := c.Query("problem_id"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument problem_id is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "problem_id", query, &params.ProblemId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem_id: %w", err).Error())
	}

	return siw.Handler.CreateContestProblem(c, contestId, params)
}

// DeleteContestProblem operation middleware
func (siw *ServerInterfaceWrapper) DeleteContestProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "contest_id" -------------
	var contestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "contest_id", c.Params("contest_id"), &contestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contest_id: %w", err).Error())
	}

	// ------------- Path parameter "problem_id" -------------
	var problemId int32

	err = runtime.BindStyledParameterWithOptions("simple", "problem_id", c.Params("problem_id"), &problemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteContestProblem(c, contestId, problemId)
}

// GetContestProblem operation middleware
func (siw *ServerInterfaceWrapper) GetContestProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "contest_id" -------------
	var contestId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "contest_id", c.Params("contest_id"), &contestId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contest_id: %w", err).Error())
	}

	// ------------- Path parameter "problem_id" -------------
	var problemId int32

	err = runtime.BindStyledParameterWithOptions("simple", "problem_id", c.Params("problem_id"), &problemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetContestProblem(c, contestId, problemId)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *fiber.Ctx) error {

	return siw.Handler.GetHealth(c)
}

// ListProblems operation middleware
func (siw *ServerInterfaceWrapper) ListProblems(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProblemsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument page is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := c.Query("pageSize"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument pageSize is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", query, &params.PageSize)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pageSize: %w", err).Error())
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", query, &params.Title)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter title: %w", err).Error())
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", query, &params.Order)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter order: %w", err).Error())
	}

	return siw.Handler.ListProblems(c, params)
}

// CreateProblem operation middleware
func (siw *ServerInterfaceWrapper) CreateProblem(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateProblemParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "title" -------------

	if paramValue := c.Query("title"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument title is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "title", query, &params.Title)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter title: %w", err).Error())
	}

	return siw.Handler.CreateProblem(c, params)
}

// DeleteProblem operation middleware
func (siw *ServerInterfaceWrapper) DeleteProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteProblem(c, id)
}

// GetProblem operation middleware
func (siw *ServerInterfaceWrapper) GetProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetProblem(c, id)
}

// UpdateProblem operation middleware
func (siw *ServerInterfaceWrapper) UpdateProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateProblem(c, id)
}

// UploadProblem operation middleware
func (siw *ServerInterfaceWrapper) UploadProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UploadProblem(c, id)
}

// ListSolutions operation middleware
func (siw *ServerInterfaceWrapper) ListSolutions(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSolutionsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument page is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := c.Query("pageSize"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument pageSize is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", query, &params.PageSize)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pageSize: %w", err).Error())
	}

	// ------------- Optional query parameter "contestId" -------------

	err = runtime.BindQueryParameter("form", true, false, "contestId", query, &params.ContestId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contestId: %w", err).Error())
	}

	// ------------- Optional query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, false, "userId", query, &params.UserId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	// ------------- Optional query parameter "problemId" -------------

	err = runtime.BindQueryParameter("form", true, false, "problemId", query, &params.ProblemId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problemId: %w", err).Error())
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", query, &params.State)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter state: %w", err).Error())
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", query, &params.Order)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter order: %w", err).Error())
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", query, &params.Language)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter language: %w", err).Error())
	}

	return siw.Handler.ListSolutions(c, params)
}

// CreateSolution operation middleware
func (siw *ServerInterfaceWrapper) CreateSolution(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateSolutionParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "problem_id" -------------

	if paramValue := c.Query("problem_id"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument problem_id is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "problem_id", query, &params.ProblemId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem_id: %w", err).Error())
	}

	// ------------- Required query parameter "contest_id" -------------

	if paramValue := c.Query("contest_id"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument contest_id is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "contest_id", query, &params.ContestId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contest_id: %w", err).Error())
	}

	// ------------- Required query parameter "language" -------------

	if paramValue := c.Query("language"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument language is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "language", query, &params.Language)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter language: %w", err).Error())
	}

	return siw.Handler.CreateSolution(c, params)
}

// GetSolution operation middleware
func (siw *ServerInterfaceWrapper) GetSolution(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "solution_id" -------------
	var solutionId int32

	err = runtime.BindStyledParameterWithOptions("simple", "solution_id", c.Params("solution_id"), &solutionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter solution_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetSolution(c, solutionId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument page is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := c.Query("pageSize"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument pageSize is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", query, &params.PageSize)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter pageSize: %w", err).Error())
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", query, &params.Search)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter search: %w", err).Error())
	}

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", query, &params.Role)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter role: %w", err).Error())
	}

	return siw.Handler.GetUsers(c, params)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.GetMe(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.GetUser(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/contests", wrapper.ListContests)

	router.Post(options.BaseURL+"/contests", wrapper.CreateContest)

	router.Delete(options.BaseURL+"/contests/:contest_id", wrapper.DeleteContest)

	router.Get(options.BaseURL+"/contests/:contest_id", wrapper.GetContest)

	router.Patch(options.BaseURL+"/contests/:contest_id", wrapper.UpdateContest)

	router.Get(options.BaseURL+"/contests/:contest_id/monitor", wrapper.GetMonitor)

	router.Delete(options.BaseURL+"/contests/:contest_id/participants", wrapper.DeleteParticipant)

	router.Get(options.BaseURL+"/contests/:contest_id/participants", wrapper.ListParticipants)

	router.Post(options.BaseURL+"/contests/:contest_id/participants", wrapper.CreateParticipant)

	router.Post(options.BaseURL+"/contests/:contest_id/problems", wrapper.CreateContestProblem)

	router.Delete(options.BaseURL+"/contests/:contest_id/problems/:problem_id", wrapper.DeleteContestProblem)

	router.Get(options.BaseURL+"/contests/:contest_id/problems/:problem_id", wrapper.GetContestProblem)

	router.Get(options.BaseURL+"/health", wrapper.GetHealth)

	router.Get(options.BaseURL+"/problems", wrapper.ListProblems)

	router.Post(options.BaseURL+"/problems", wrapper.CreateProblem)

	router.Delete(options.BaseURL+"/problems/:id", wrapper.DeleteProblem)

	router.Get(options.BaseURL+"/problems/:id", wrapper.GetProblem)

	router.Patch(options.BaseURL+"/problems/:id", wrapper.UpdateProblem)

	router.Post(options.BaseURL+"/problems/:id", wrapper.UploadProblem)

	router.Get(options.BaseURL+"/solutions", wrapper.ListSolutions)

	router.Post(options.BaseURL+"/solutions", wrapper.CreateSolution)

	router.Get(options.BaseURL+"/solutions/:solution_id", wrapper.GetSolution)

	router.Get(options.BaseURL+"/users", wrapper.GetUsers)

	router.Get(options.BaseURL+"/users/me", wrapper.GetMe)

	router.Get(options.BaseURL+"/users/:id", wrapper.GetUser)

}
